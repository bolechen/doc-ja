<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 969080b59241971cc8d6cb08c3b14d7262e6851d Maintainer: mumumu Status: ready -->

 <chapter xml:id="language.attributes" xmlns="http://docbook.org/ns/docbook">
  <title>アトリビュート</title>
  <sect1 xml:id="language.attributes.overview">
   <title>アトリビュートの概要</title>
   <?phpdoc print-version-for="attributes"?>

   <para>
    アトリビュートを使うと、
    コンピューターが解析できる構造化されたメタデータの情報を、
    コードの宣言時に埋め込むことができます。
    つまり、クラス、メソッド、関数、プロパティ、クラス定数にアトリビュートを指定することができます。
    アトリビュートで定義されたメタデータは、
    実行時に <link linkend="book.reflection">リフレクションAPI</link> を使って調べることが出来ます。
    よって、アトリビュートは、
    コードに直接埋め込むことが出来る、
    設定のための言語とみなすことができます。
   </para>

   <para>
    アトリビュートを使うと、機能の抽象的な実装と、アプリケーションでの具体的な利用を分離できます。
    この点でアトリビュートは、インターフェイスとその実装と比較できます。
    インターフェイスとその実装はコードに関する情報ですが、
    アトリビュートはコードの追加情報と設定に注釈を付けるものです。
    インターフェイスはクラスによって実装できますが、
    アトリビュートはメソッドや関数、引数、プロパティ、クラス定数で宣言できます。
    よって、アトリビュートはインターフェイスより柔軟です。
   </para>

    <para>
     アトリビュートの使い方の簡単な例として、
     必須でないメソッドを持つインターフェイスを、
     アトリビュートを使うように変換するコードを示します。
     アプリケーションの操作を表現する <literal>ActionHandler</literal> があるとします。
     この <literal>ActionHandler</literal> の実装は、セットアップが必須なものもありますが、
     そうでないものもあります。
     <literal>ActionHandler</literal> を実装する全てのクラスで
     <literal>setUp()</literal> メソッドを必須とする代わりに、
     アトリビュートを使うようにしてみましょう。
     このアプローチの利点のひとつは、
     アトリビュートを複数回使えることです。
    </para>

   <example>
    <title>アトリビュートを使い、インターフェイスのオプションのメソッドを実装する</title>
     <programlisting role="php">
<![CDATA[
<?php
interface ActionHandler
{
    public function execute();
}

#[Attribute]
class SetUp {}

class CopyFile implements ActionHandler
{
    public string $fileName;
    public string $targetDirectory;

    #[SetUp]
    public function fileExists()
    {
        if (!file_exists($this->fileName)) {
            throw new RuntimeException("File does not exist");
        }
    }

    #[SetUp]
    public function targetDirectoryExists()
    {
        if (!file_exists($this->targetDirectory)) {
            mkdir($this->targetDirectory);
        } elseif (!is_dir($this->targetDirectory)) {
            throw new RuntimeException("Target directory $this->targetDirectory is not a directory");
        }
    }

    public function execute()
    {
        copy($this->fileName, $this->targetDirectory . '/' . basename($this->fileName));
    }
}

function executeAction(ActionHandler $actionHandler)
{
    $reflection = new ReflectionObject($actionHandler);

    foreach ($reflection->getMethods() as $method) {
        $attributes = $method->getAttributes(SetUp::class);

        if (count($attributes) > 0) {
            $methodName = $method->getName();

            $actionHandler->$methodName();
        }
    }

    $actionHandler->execute();
}

$copyAction = new CopyFile();
$copyAction->fileName = "/tmp/foo.jpg";
$copyAction->targetDirectory = "/home/user";

executeAction($copyAction);
]]>
     </programlisting>
    </example>
  </sect1>

  <sect1 xml:id="language.attributes.syntax">
   <title>アトリビュートの文法</title>

   <para>
    アトリビュートの文法は、複数の部分からなります。
    まず最初に、アトリビュートの宣言は常に <literal>#[</literal> で始まり、
    それに対応する <literal>]</literal> で囲みます。
    その内部では、ひとつ以上のアトリビュートが並び、それぞれをカンマで区切ります。
    アトリビュートの名前は、
    <link linkend="language.namespaces.basics">名前空間の基礎</link> で説明している
    非修飾名、修飾名、完全修飾名が指定できます。
    アトリビュートの引数はオプションですが、
    括弧 <literal>()</literal> で囲みます。
    アトリビュートの引数はリテラル値か、定数式のみが指定できます。
    位置を指定した引数と、名前付き引数の両方が使えます。
   </para>

   <para>
    アトリビュートの名前と引数は、
    アトリビュートのインスタンスがリフレクションAPIから要求された際、
    クラスとそのコンストラクタに渡す引数として解決されます。
    よって、それぞれのアトリビュート毎にクラスが存在するはずです。
   </para>

   <example>
    <title>アトリビュートの文法</title>

    <programlisting role="php">
<![CDATA[
<?php
// a.php
namespace MyExample;

use Attribute;

#[Attribute]
class MyAttribute
{
    const VALUE = 'value';

    private $value;

    public function __construct($value = null)
    {
        $this->value = $value;
    }
}

// b.php

namespace Another;

use MyExample\MyAttribute;

#[MyAttribute]
#[\MyExample\MyAttribute]
#[MyAttribute(1234)]
#[MyAttribute(value: 1234)]
#[MyAttribute(MyAttribute::VALUE)]
#[MyAttribute(array("key" => "value"))]
#[MyAttribute(100 + 200)]
class Thing
{
}

#[MyAttribute(1234), MyAttribute(5678)]
class AnotherThing
{
}
]]>
    </programlisting>
   </example>
  </sect1>


  <sect1 xml:id="language.attributes.reflection">
   <title>リフレクションAPI を使ってアトリビュートを読み取る</title>

   <para>
    クラス、メソッド、関数、引数、プロパティ、クラス定数からアトリビュートにアクセスするために、
    リフレクションAPI は対応するリフレクションオブジェクトに
    <function>getAttributes</function> メソッドを提供しています。
    このメソッドを使うと、
    アトリビュートの名前や引数で問い合わせを行うことができ、
    アトリビュートを表現するクラスをインスタンス化させることができます。
    このメソッドは、<classname>ReflectionAttribute</classname> のインスタンスの配列を返します。
   </para>

   <para>
    リフレクションされたアトリビュートの表現と、
    実際のインスタンスを分離することで、
    アトリビュートのクラスが存在しなかったり、
    タイピングミスや引数の不足に関するエラーをプログラマが制御しやすくなります。
    <function>ReflectionAttribute::newInstance</function> を呼び出した後のみ、
    アトリビュートクラスのオブジェクトはインスタンス化でき、
    引数が合っているかを検証できます。これ以前のタイミングでは出来ません。
   </para>

   <example>
    <title>リフレクションAPIを使い、アトリビュートを読み取る</title>

    <programlisting role="php">
<![CDATA[
<?php

#[Attribute]
class MyAttribute
{
    public $value;

    public function __construct($value)
    {
        $this->value = $value;
    }
}

#[MyAttribute(value: 1234)]
class Thing
{
}

function dumpAttributeData($reflection) {
    $attributes = $reflection->getAttributes();

    foreach ($attributes as $attribute) {
       var_dump($attribute->getName());
       var_dump($attribute->getArguments());
       var_dump($attribute->newInstance());
    }
}

dumpAttributeData(new ReflectionClass(Thing::class));
/*
string(11) "MyAttribute"
array(1) {
  ["value"]=>
  int(1234)
}
object(MyAttribute)#3 (1) {
  ["value"]=>
  int(1234)
}
*/

]]>
    </programlisting>
   </example>

   <para>
    アトリビュートクラスの名前を渡すことで、
    リフレクションインスタンスの全てのアトリビュートをループさせる代わりに、
    特定のアトリビュートのクラスだけを取得することができます。
   </para>

   <example>
    <title>リフレクションAPIを使い、特定のアトリビュートを読み取る</title>

    <programlisting role="php">
<![CDATA[
<?php

function dumpMyAttributeData($reflection) {
    $attributes = $reflection->getAttributes(MyAttribute::class);

    foreach ($attributes as $attribute) {
       var_dump($attribute->getName());
       var_dump($attribute->getArguments());
       var_dump($attribute->newInstance());
    }
}

dumpAttributeData(new ReflectionClass(Thing::class));
]]>
     </programlisting>
    </example>
  </sect1>

  <sect1 xml:id="language.attributes.classes">
   <title>アトリビュートクラスを宣言する</title>

   <para>
    厳密に必須ではありませんが、
    アトリビュート毎にクラスを作成することを推奨します。
    もっとも簡単な場合、
    グローバル名前空間からuse文でインポートできる
    アトリビュート <literal>#[Attribute]</literal> を宣言した空のクラスだけが必要です。
   </para>

  <example>
   <title>アトリビュートを使える場所を限定するために、ターゲットとなるクラスを作る</title>

   <programlisting role="php">
<![CDATA[
<?php

namespace Example;

use Attribute;

#[Attribute]
class MyAttribute
{
}
]]>
   </programlisting>
  </example>

  <para>
   アトリビュートを割り当てられる場所を制限するために、
   <literal>#[Attribute]</literal> 宣言の第一引数にビットマスクを渡すことができます。

   <!--
   To restrict the type of declaration an attribute can be assigned to, a bitmask can be passed as the first
   argument to the <literal>#[Attribute]</literal> declaration.
   -->
  </para>

  <example>
   <title>単純なアトリビュートクラスの例</title>

   <programlisting role="php">
<![CDATA[
<?php

namespace Example;

use Attribute;

#[Attribute(Attribute::TARGET_METHOD | Attribute::TARGET_FUNCTION)]
class MyAttribute
{
}
]]>
    </programlisting>

    <para>
     <classname>MyAttribute</classname> を別の型で宣言すると、
     <function>ReflectionAttribute::newInstance</function> の呼び出し時に例外がスローされます。
    </para>
   </example>

   <para>
    デフォルトでは、アトリビュートは一度宣言したら一度だけ使うことが出来ます。
    アトリビュートを宣言時に繰り返し使えるようにする場合、
    <literal>#[Attribute]</literal> の宣言時に、ビットマスクで指定しなければいけません。


    <!--
    By default an attribute can only be used once per declaration.
    If the attribute should be repeatable on declarations
    it must
    be specified as part of the bitmask to the <literal>#[Attribute]</literal> declaration.
    -->
   </para>

   <example>
    <title>宣言時にアトリビュートを複数回使えるように、IS_REPEATABLE を使う</title>

    <programlisting role="php">
<![CDATA[
<?php

namespace Example;

use Attribute;

#[Attribute(Attribute::TARGET_METHOD | Attribute::TARGET_FUNCTION | Attribute::IS_REPEATABLE)]
class MyAttribute
{
}
]]>
    </programlisting>

   </example>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
