<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5ccee0ae1c9978e1b28b0dd3ff901393f8be19e9 Maintainer: iwamot Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.types.iterable">
 <title>Iterable</title>

 <para>
  <type>Iterable</type> は PHP 7.1 で導入された疑似型です。&array;、あるいは
  <classname>Traversable</classname> インターフェイスを実装したオブジェクトを
  許容します。これらの型は、いずれも &foreach; で繰り返し可能であり、また、
  <link linkend="language.generators">ジェネレータ</link> 内で
  <command>yield from</command> できます。
 </para>

 <sect2 xml:id="language.types.iterable.using">
  <title>Iterable の使用</title>

  <para>
   Iterable は、関数が値のセットを要求するものの、&foreach; とともに使うため、
   値の形式は問わないことを示すパラメータ型として使用できます。値が、配列でも
   <classname>Traversable</classname> のインスタンスでもない場合は、
   <classname>TypeError</classname> がスローされます。
  </para>

  <para>
   <example>
    <title>
     Iterable パラメータ型の例
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function foo(iterable $iterable) {
    foreach ($iterable as $value) {
        // ...
    } 
}

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   Iterable として宣言されたパラメータは、&null; または配列をデフォルト値
   として使用できます。
  </para>

  <para>
   <example>
    <title>
     Iterable パラメータのデフォルト値の例
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function foo(iterable $iterable = []) {
    // ...
}

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   Iterable は、繰り返し可能な値を関数が返すことを示すため、戻り値の型としても
   使用できます。戻り値が、配列でも <classname>Traversable</classname> の
   インスタンスでもない場合、<classname>TypeError</classname> がスローされます。
  </para>

  <para>
   <example>
    <title>
     Iterable 戻り値の例
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function bar(): iterable {
    return [1, 2, 3];
}

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   戻り値の型として Iterable を宣言する関数は、<link
   linkend="language.generators">ジェネレータ</link> にもなります。
  </para>

  <para>
   <example>
    <title>
     Iterable 戻り値のジェネレータの例
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function gen(): iterable {
    yield 1;
    yield 2;
    yield 3;
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
