<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ff4424769d137df9503b4aeee0b1b514752fdccf Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka,mumumu -->
<refentry xml:id="function.flock" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>flock</refname>
  <refpurpose>汎用のファイルロックを行う</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>flock</methodname>
   <methodparam><type>resource</type><parameter>stream</parameter></methodparam>
   <methodparam><type>int</type><parameter>operation</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">would_block</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>flock</function> を使うと、(ほとんどの Unix、そして Windows さえ含む)
   事実上すべてのプラットフォームで使用可能な、簡易な読み手/書き手モデルを実現できます。
  </para>
  <para>
   PHP 5.3.2 より前のバージョンでは、<function>fclose</function>
   でロックの解放も行います
   (これは、スクリプトが終了した場合にも自動的にコールされます)。
  </para>
  <para>
   PHP は、恣意的にファイルをロックする汎用の手段を提供します
   (これは、アクセスする全プログラムが同一のロックの方法を使用する必要があり、
   そうでない場合は動作しないことを意味します)。
   デフォルトでは、要求したロックが確保されるまでこの関数はブロックします。
   以下で説明する <constant>LOCK_NB</constant>
   オプションでこの挙動を制御することができます。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stream</parameter></term>
     <listitem>
      &fs.file.pointer;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>operation</parameter></term>
     <listitem>
      <para>
       <parameter>operation</parameter> は以下のいずれかとなります。
       <itemizedlist>
        <listitem>
         <simpara>
          共有ロック(読み手)とするには
          <constant>LOCK_SH</constant>
          をセットします。
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          排他的ロック(書き手)とするには
          <constant>LOCK_EX</constant>
          をセットします。
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          (共有または排他的)ロックを開放するには
          <constant>LOCK_UN</constant>
          をセットします。
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       ロックを試みている間に <function>flock</function> がブロックすべきでない場合は、上の操作のいずれかに <constant>LOCK_NB</constant> をビットマスクとして追加できます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>would_block</parameter></term>
     <listitem>
      <para>
       ロックがブロックされた (errno が EWOULDBLOCK となった)
       場合に、オプションの 3 番目の引数に 1 が設定されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>flock</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php

$fp = fopen("/tmp/lock.txt", "r+");

if (flock($fp, LOCK_EX)) {  // 排他ロックを確保します
    ftruncate($fp, 0);      // ファイルを切り詰めます
    fwrite($fp, "ここで何かを書きます\n");
    fflush($fp);            // 出力をフラッシュしてからロックを解放します
    flock($fp, LOCK_UN);    // ロックを解放します
} else {
    echo "ファイルを取得できません!";
}

fclose($fp);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>flock</function> で <constant>LOCK_NB</constant> オプションを使う例</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('/tmp/lock.txt', 'r+');

/* LOCK_NB オプションを LOCK_EX で有効にします */
if(!flock($fp, LOCK_EX | LOCK_NB)) {
    echo 'Unable to obtain lock';
    exit(-1);
}

/* ... */

fclose($fp);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <function>flock</function> は、Windows 上ではアドバイザリロックではなく
    強制ロックを使います。強制ロックは Linux や System V 系の OS でもサポートされています。
    これは、そのファイルに setgid パーミッションが設定されていて
    グループの実行ビットがクリアされている場合に
    fcntl() システムコールが通常サポートしている方式です。
    Linux では、これを行うには mand オプションつきでファイルシステムをマウントしておく必要があります。
   </para>
  </note>
  <note>
   <para>
    <function>flock</function>は、ファイルポインタを必要とするため、
    (<function>fopen</function>へ引数"w"または"w+"を指定して)書き込
    みモードでオープンすることにより丸めるファイルにアクセス保護する
    特別なロックファイルを使用する必要があるかもしれません。
   </para>
  </note>
  <note>
   <para>
    <function>fopen</function> が返すローカルファイルへのポインタ、あるいは
    <function>streamWrapper::stream_lock</function> メソッドを実装した
    ユーザー空間のストリームを指すファイルポインタに対してのみ使うことができます。
   </para>
  </note>
  <warning>
   <para>
    一連のコードで別の値を <parameter>stream</parameter> 引数に代入すると、
    それ以降のコードでロックを解放します。
   </para>
  </warning>
  <warning>
   <para>
    いくつかのオーペレーティングシステムで<function>flock</function>
    はプロセスレベルで実装されています。マルチスレッド
    型のサーバーAPIを使用している場合、同じサーバーインスタンスの並
    列スレッドで実行されている他のPHPスクリプトに対してファイルを保
    護する際に <function>flock</function>を使用することはできません!
   </para>
   <para>
    <function>flock</function>は<literal>FAT</literal>のような
    旧式のファイルシステムではサポートされていないため、
    これらの環境の場合は常に&false;を返すことになります。
   </para>
  </warning>
  <note>
   <para>
    Windows では、
    ロックするプロセスが同じファイルを二回オープンする場合、
    ファイルをアンロックするまで二番目のハンドルではアクセスできません。
   </para>
  </note>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
