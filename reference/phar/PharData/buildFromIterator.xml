<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: f5a5f5ae75cf140bd3dd65da52b70f6236b0e131 Maintainer: takagi Status: ready -->
<refentry xml:id="phardata.buildfromiterator" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>PharData::buildFromIterator</refname>
  <refpurpose>イテレータから tar あるいは zip アーカイブを作成する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>PharData::buildFromIterator</methodname>
   <methodparam><type>Iterator</type><parameter>iter</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>base_directory</parameter></methodparam>
  </methodsynopsis>
  <para>
   tar あるいは zip アーカイブをイテレータから作成します。
   サポートするイテレータは二種類で、
   tar/zip 内のファイル名とディスク上の実際のファイル名を対応させたものか、あるいは
   DirectoryIterator のように SplFileInfo オブジェクトを返すものです。
   SplFileInfo オブジェクトを返すイテレータの場合は、2 番目のパラメータが必要となります。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>iter</parameter></term>
     <listitem>
      <para>
       phar ファイルと実際の場所の関連を返すイテレータ、
       あるいは SplFileInfo オブジェクトを返すイテレータ。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>base_directory</parameter></term>
     <listitem>
      <para>
       SplFileInfo オブジェクトを返すイテレータを指定した際、
       tar/zip アーカイブへの追加時にフルパスから取り除く部分。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>PharData::buildFromIterator</function>
   は連想配列を返します。
   これは、ファイルの内部パスとファイルシステム上のフルパスを対応させたものです。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   このメソッドは、イテレータが間違った値 (たとえば文字列キーではなく整数キーなど)
   を返した場合に <classname>UnexpectedValueException</classname>
   を返します。また、SplFileInfo 型のイテレータを渡したときに
   <parameter>base_directory</parameter> を指定しなかった場合は
   <classname>BadMethodCallException</classname> を、
   phar アーカイブの保存時にエラーが発生した場合は
   <classname>PharException</classname> を返します。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
   <example>
    <title>SplFileInfo を使用した <function>PharData::buildFromIterator</function> の例</title>
  <para>
   ほとんどの tar/zip アーカイブは、実際のディレクトリ構造を反映した形式になっています。
   このような場合は 2 番目の方式が最適です。
   たとえば、次のようなディレクトリ構成のファイルを含む
   tar/zip アーカイブを作成してみることにしましょう。
  </para>
  <para>
   <screen>
    <![CDATA[
/path/to/project/
                 config/
                        dist.xml
                        debug.xml
                 lib/
                     file1.php
                     file2.php
                 src/
                     processthing.php
                 www/
                     index.php
                 cli/
                     index.php
    ]]>
   </screen>
  </para>
  <para>
   次のコードを使用すると、これらのファイルを tar アーカイブ
   &quot;project.tar&quot; に追加します。
  </para>
  <para>
   <programlisting role="php">
    <![CDATA[
<?php
$phar = new PharData('project.tar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new RecursiveDirectoryIterator('/path/to/project')),
    '/path/to/project');
?>
    ]]>
   </programlisting>
  </para>
  <para>
   これで、ファイル <literal>project.tar</literal> はすぐに使えるようになります。
   <function>PharData::buildFromIterator</function> は圧縮やメタデータの設定を行いません。
   これらは tar/zip アーカイブを作成した後で行うことができます。
  </para>
  <para>
   興味深いことに、<function>PharData::buildFromIterator</function>
   を使用して既存の phar や tar、あるいは zip アーカイブの中身をコピーすることもできます。
   というのも PharData オブジェクトは
   <classname>DirectoryIterator</classname> を継承しているからです。
  </para>
  <para>
   <programlisting role="php">
    <![CDATA[
<?php
$phar = new PharData('project.tar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new Phar('/path/to/anotherphar.phar')),
    'phar:///path/to/anotherphar.phar/path/to/project');
$phar->setStub($phar->createDefaultStub('cli/index.php', 'www/index.php'));
?>
    ]]>
   </programlisting>
  </para>
  </example>
  <example>
    <title>その他のイテレータを使用した <function>PharData::buildFromIterator</function> の例</title>
  <para>
   それ以外の形式のイテレータでは、
   key => value の対応を返すものを使用できます。たとえば
   <classname>ArrayIterator</classname> などです。
  </para>
  <para>
   <programlisting role="php">
    <![CDATA[
<?php
$phar = new PharData('project.tar');
$phar->buildFromIterator(
    new ArrayIterator(
     array(
        'internal/file.php' => dirname(__FILE__) . '/somefile.php',
        'another/file.jpg' => fopen('/path/to/bigfile.jpg', 'rb'),
     )));
?>
    ]]>
   </programlisting>
  </para>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::buildFromIterator</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
