<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: f5a5f5ae75cf140bd3dd65da52b70f6236b0e131 Maintainer: takagi Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="phar.stopbuffering">
 <refnamediv>
  <refname>Phar::stopBuffering</refname>
  <refpurpose>Phar アーカイブへの書き込みリクエストのバッファリングを終了し、変更内容をディスクに書き込む</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>Phar::stopBuffering</methodname>
   <void/>
  </methodsynopsis>

  <para>
   <function>Phar::stopBuffering</function> は、
   <function>Phar::startBuffering</function> メソッドと組み合わせて使用します。
   <function>Phar::startBuffering</function> メソッドを使用すると、
   大量のファイルを含む Phar アーカイブの作成や変更が非常に高速になります。
   通常は、Phar アーカイブ内のファイルが作成あるいは変更されるたびに
   Phar アーカイブ全体を改めて作り直します。
   これによって、アーカイブが常に最新の状態となります。
  </para>
  <para>
   しかし、単に新しい Phar アーカイブを作りたいときや
   アーカイブ全体を一度に書き出したいときなどは、これは不要です。
   同様に、いくつかの変更を行うときに、
   すべての変更がうまくいったことを確認してから実際にディスクに書き込みたい
   ということもあるでしょう。
   これは、ちょうどデータベースのトランザクションの概念と同じようなものです。
   <function>Phar::startBuffering</function>/<function>Phar::stopBuffering</function>
   の両メソッドが、このような場合のために用意されています。
  </para>
  <para>
   Phar の書き込みバッファリングはアーカイブ単位で処理されます。
   Phar アーカイブ <literal>foo.phar</literal>
   でバッファリングが有効であったとしても、それは
   Phar アーカイブ <literal>bar.phar</literal>
   の変更には影響しません。
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   変更をディスクに書き出す際に何らかの問題が発生した場合は
   <classname>PharException</classname> がスローされます。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>Phar::stopBuffering</function> の例</title>
    <para>
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$p = new Phar(dirname(__FILE__) . '/brandnewphar.phar', 0, 'brandnewphar.phar');
$p['file1.txt'] = 'hi';
$p->startBuffering();
var_dump($p->getStub());
$p->setStub("<?php
function __autoload(\$class)
{
    include 'phar://brandnewphar.phar/' . str_replace('_', '/', \$class) . '.php';
}
Phar::mapPhar('brandnewphar.phar');
include 'phar://brandnewphar.phar/startup.php';
__HALT_COMPILER();");
$p->stopBuffering();
var_dump($p->getStub());
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(24) "<?php __HALT_COMPILER();"
string(195) "<?php
function __autoload($class)
{
    include 'phar://' . str_replace('_', '/', $class);
}
Phar::mapPhar('brandnewphar.phar');
include 'phar://brandnewphar.phar/startup.php';
__HALT_COMPILER();"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::startBuffering</function></member>
    <member><function>Phar::isBuffering</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
