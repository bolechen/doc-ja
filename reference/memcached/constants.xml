<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: f9c4a68ef4f89e51e6d9b905ad3ddb6492386dd3 Maintainer: mumumu Status: ready -->
<!-- CREDITS: takagi -->

<appendix xml:id="memcached.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <variablelist>

  <varlistentry xml:id="memcached.constants.opt-compression">
   <term><constant>Memcached::OPT_COMPRESSION</constant></term>
   <listitem>
    <para>ペイロードの圧縮を有効あるいは無効にします。有効にすると、
     一定の閾値 (現在は 100 バイト) を超える長さのアイテムは
     格納時に圧縮され、取得時に伸長されます。この操作は透過的に行われます。
    </para>
    <para>型: <literal>boolean</literal>、デフォルト: &true;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-serializer">
   <term><constant>Memcached::OPT_SERIALIZER</constant></term>
   <listitem>
    <para>
     非スカラ値のシリアライズに使うシリアライザを指定します。
     有効なシリアライザは <constant>Memcached::SERIALIZER_PHP</constant>
     あるいは <constant>Memcached::SERIALIZER_IGBINARY</constant> です。
     後者のシリアライザをサポートするのは memcached の configure 時に
     <literal>--enable-memcached-igbinary</literal> オプションを指定して
     <literal>igbinary</literal> 拡張を読み込んだときだけです。
    </para>
    <para>型: <literal>integer</literal>、デフォルト: <constant>Memcached::SERIALIZER_PHP</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-php">
   <term><constant>Memcached::SERIALIZER_PHP</constant></term>
   <listitem>
    <para>デフォルトの PHP シリアライザ。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-igbinary">
   <term><constant>Memcached::SERIALIZER_IGBINARY</constant></term>
   <listitem>
    <para><link xlink:href="&url.igbinary;">igbinary</link> シリアライザ。
     テキスト表現ではなく、PHP のデータ構造をコンパクトなバイナリ形式で格納します。
     その結果、容量と時間を節約できます。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-json">
   <term><constant>Memcached::SERIALIZER_JSON</constant></term>
   <listitem>
    <para>JSON シリアライザ。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-prefix-key">
   <term><constant>Memcached::OPT_PREFIX_KEY</constant></term>
   <listitem>
    <para>これを使うと、アイテムのキーに「ドメイン」を作成できます。
     ここで指定した値がキーの名前の先頭に付きます。
     <literal>128</literal> 文字より長くはできず、
     ここで指定した値の分だけキーに指定できる長さが小さくなります。
     プレフィックスが付くのはアイテムのキーだけであり、
     サーバーのキーには付きません。</para>
    <para>型: <literal>string</literal>、デフォルト: <literal>""</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-hash">
   <term><constant>Memcached::OPT_HASH</constant></term>
   <listitem>
    <para>アイテムのキーに使うハッシュアルゴリズムを指定します。
     有効な値は、定数 <constant>Memcached::HASH_*</constant> のいずれかです。
     どのハッシュアルゴリズムにもそれぞれ利点や欠点があります。
     よくわからない場合やあまり難しく考えたくない場合はデフォルトで進めましょう。
    </para>
    <para>型: <literal>integer</literal>、デフォルト: <constant>Memcached::HASH_DEFAULT</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-default">
   <term><constant>Memcached::HASH_DEFAULT</constant></term>
   <listitem>
    <para>デフォルトのハッシュアルゴリズム (Jenkins one-at-a-time)。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-md5">
   <term><constant>Memcached::HASH_MD5</constant></term>
   <listitem>
    <para>MD5 ハッシュアルゴリズム。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-crc">
   <term><constant>Memcached::HASH_CRC</constant></term>
   <listitem>
    <para>CRC ハッシュアルゴリズム。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-64">
   <term><constant>Memcached::HASH_FNV1_64</constant></term>
   <listitem>
    <para>FNV1_64 ハッシュアルゴリズム。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-64">
   <term><constant>Memcached::HASH_FNV1A_64</constant></term>
   <listitem>
    <para>FNV1_64A ハッシュアルゴリズム。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-32">
   <term><constant>Memcached::HASH_FNV1_32</constant></term>
   <listitem>
    <para>FNV1_32 ハッシュアルゴリズム。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-32">
   <term><constant>Memcached::HASH_FNV1A_32</constant></term>
   <listitem>
    <para>FNV1_32A ハッシュアルゴリズム。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-hsieh">
   <term><constant>Memcached::HASH_HSIEH</constant></term>
   <listitem>
    <para>Hsieh ハッシュアルゴリズム。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-murmur">
   <term><constant>Memcached::HASH_MURMUR</constant></term>
   <listitem>
    <para>Murmur ハッシュアルゴリズム。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-distribution">
   <term><constant>Memcached::OPT_DISTRIBUTION</constant></term>
   <listitem>
    <para>アイテムのキーをサーバーに振り分ける方式を指定します。
     現在サポートしている方式は、モジュロとコンシステント・ハッシュの二種類です。
     コンシステント・ハッシュのほうがよりうまく分散させられ、
     サーバーをクラスタに追加するときにもキャッシュのロスを最小限に抑えられます。</para>
    <para>型: <literal>integer</literal>、デフォルト: <constant>Memcached::DISTRIBUTION_MODULA</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-modula">
   <term><constant>Memcached::DISTRIBUTION_MODULA</constant></term>
   <listitem>
    <para>モジュロベースのキー分散アルゴリズム。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-consistent">
   <term><constant>Memcached::DISTRIBUTION_CONSISTENT</constant></term>
   <listitem>
    <para>コンシステント・ハッシュを使ったキー分散アルゴリズム (libketama を利用)。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-libketama-compatible">
   <term><constant>Memcached::OPT_LIBKETAMA_COMPATIBLE</constant></term>
   <listitem>
    <para>libketama 風の挙動との互換性を有効あるいは無効にします。
     有効にすると、アイテムのキーのハッシュアルゴリズムは MD5、
     そして分散方式は重み付きコンシステント・ハッシュになります。
     これを使うと、他の libketama ベースのクライアント (Python や Ruby など)
     を同じサーバー設定で使え、キーも透過的にアクセスできるようになるので有用です。
    </para>
    <note>
     <para>
      コンシステント・ハッシュを使うときは、このオプションを有効にしておくことを強く推奨します。
      将来のリリースでは、これはデフォルトで有効になる予定です。
     </para>
    </note>
    <para>型: <literal>boolean</literal>、デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-buffer-writes">
   <term><constant>Memcached::OPT_BUFFER_WRITES</constant></term>
   <listitem>
    <para>バッファ入出力を有効あるいは無効にします。
     バッファ入出力を有効にすると、ストレージへのコマンドを送信する代わりに
     「バッファ」に向けるようになります。
     データを取得するアクションを実行すると、このバッファをリモート接続に送信します。
     接続を終了したり閉じたりしたときも、バッファに入ったデータをリモート接続に送信します。</para>
    <para>型: <literal>boolean</literal>、デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-binary-protocol">
   <term><constant>Memcached::OPT_BINARY_PROTOCOL</constant></term>
   <listitem>
    <para>バイナリプロトコルを使えるようにします。
     既に開いている接続ではこのオプションを切り替えられないことに注意しましょう。</para>
    <para>型: <literal>boolean</literal>、デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-no-block">
   <term><constant>Memcached::OPT_NO_BLOCK</constant></term>
   <listitem>
    <para>非同期入出力を有効あるいは無効にします。
     これは、ストレージ関数で使える転送の中でも最も高速なものです。</para>
    <para>型: <literal>boolean</literal>、デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-tcp-nodelay">
   <term><constant>Memcached::OPT_TCP_NODELAY</constant></term>
   <listitem>
    <para>ソケット接続用のno-delay機能
     (環境によってはそのほうが高速化する) を有効あるいは無効にします。</para>
    <para>型: <literal>boolean</literal>、デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-send-size">
   <term><constant>Memcached::OPT_SOCKET_SEND_SIZE</constant></term>
   <listitem>
    <para>バッファに送信するソケットの最大のバイト数。</para>
    <para>型: <literal>integer</literal>、デフォルト: プラットフォームやカーネルの設定によって異なる</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-recv-size">
   <term><constant>Memcached::OPT_SOCKET_RECV_SIZE</constant></term>
   <listitem>
    <para>ソケットの受信バッファの最大のバイト数。</para>
    <para>The maximum socket receive buffer in bytes.</para>
    <para>型: <literal>integer</literal>、デフォルト: プラットフォームやカーネルの設定によって異なる</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-connect-timeout">
   <term><constant>Memcached::OPT_CONNECT_TIMEOUT</constant></term>
   <listitem>
    <para>非ブロックモードの場合、ここにはソケット接続のタイムアウト値をミリ秒単位で指定します。</para>
    <para>型: <literal>integer</literal>、デフォルト: <literal>1000</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-retry-timeout">
   <term><constant>Memcached::OPT_RETRY_TIMEOUT</constant></term>
   <listitem>
    <para>接続に失敗したときに、どれだけ失敗するまで接続を再試行するかどうかを、秒数で表す。</para>
    <para>型: <literal>integer</literal>、デフォルト: <literal>0</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-send-timeout">
   <term><constant>Memcached::OPT_SEND_TIMEOUT</constant></term>
   <listitem>
    <para>ソケットの送信タイムアウトをマイクロ秒で指定します。
     非ブロックモードの入出力を使えない場合でも、
     これを使ってデータ送信のタイムアウトを指定できます。</para>
    <para>型: <literal>integer</literal>、デフォルト: <literal>0</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-recv-timeout">
   <term><constant>Memcached::OPT_RECV_TIMEOUT</constant></term>
   <listitem>
    <para>ソケットの読み込みタイムアウトをマイクロ秒で指定します。
     非ブロックモードの入出力を使えない場合でも、
     これを使ってデータ読み込みのタイムアウトを指定できます。</para>
    <para>型: <literal>integer</literal>、デフォルト: <literal>0</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-poll-timeout">
   <term><constant>Memcached::OPT_POLL_TIMEOUT</constant></term>
   <listitem>
    <para>接続をポーリングする際のタイムアウト時間をミリ秒単位で指定します。</para>
    <para>型: <literal>integer</literal>、デフォルト: <literal>1000</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-cache-lookups">
   <term><constant>Memcached::OPT_CACHE_LOOKUPS</constant></term>
   <listitem>
    <para>DNS ルックアップのキャッシュを有効あるいは無効にします。</para>
    <para>型: <literal>boolean</literal>、デフォルト: &false;</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-server-failure-limit">
   <term><constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant></term>
   <listitem>
    <para>サーバーへの接続の最大試行回数を指定します。
     指定した回数だけ接続の失敗が続くと、サーバーが削除されます。</para>
    <para>型: <literal>integer</literal>、デフォルト: <literal>0</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-igbinary">
   <term><constant>Memcached::HAVE_IGBINARY</constant></term>
   <listitem>
    <para>igbqinary シリアライザのサポートが有効かどうかを示します。</para>
    <para>型: <literal>boolean</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-json">
   <term><constant>Memcached::HAVE_JSON</constant></term>
   <listitem>
    <para>JSON シリアライザのサポートが有効かどうかを示します。</para>
    <para>型: <literal>boolean</literal></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-msgpack">
   <term><constant>Memcached::HAVE_MSGPACK</constant></term>
   <listitem>
    <para>msgpack シリアライザのサポートが有効かどうかを示します。</para>
    <para>Type: <literal>boolean</literal>.</para>
    <para>Memcached 3.0.0 以降で使用可能です。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-session">
   <term><constant>Memcached::HAVE_SESSION</constant></term>
   <listitem>
    <para>Type: <literal>boolean</literal>.</para>
    <para>Memcached 3.0.0 以降で使用可能です。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-sasl">
   <term><constant>Memcached::HAVE_SASL</constant></term>
   <listitem>
    <para>Type: <literal>boolean</literal>.</para>
    <para>Memcached 3.0.0 以降で使用可能です。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-extended">
   <term><constant>Memcached::GET_EXTENDED</constant></term>
   <listitem>
    <para>
     <function>Memcached::get</function>, <function>Memcached::getMulti</function>,
     <function>Memcached::getMultiByKey</function> が CASトークンの値も返すかを保証するフラグ
    </para>
    <para>Memcached 3.0.0 以降で使用可能です。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-preserve-order">
   <term><constant>Memcached::GET_PRESERVE_ORDER</constant></term>
   <listitem>
    <para><function>Memcached::getMulti</function> や
     <function>Memcached::getMultiByKey</function> のフラグで、
     リクエストしたときと同じ順番でキーを返すことを示します。
     存在しないキーを指定すると、デフォルト値の NULL を返します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-success">
   <term><constant>Memcached::RES_SUCCESS</constant></term>
   <listitem>
    <para>実行しようとした操作が成功したことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-failure">
   <term><constant>Memcached::RES_FAILURE</constant></term>
   <listitem>
    <para>実行しようとした操作が何らかの点で失敗したことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-host-lookup-failure">
   <term><constant>Memcached::RES_HOST_LOOKUP_FAILURE</constant></term>
   <listitem>
    <para>DNSの名前解決が失敗したことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-unknown-read-failure">
   <term><constant>Memcached::RES_UNKNOWN_READ_FAILURE</constant></term>
   <listitem>
    <para>ネットワーク経由でのデータの読み取りに失敗したことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-protocol-error">
   <term><constant>Memcached::RES_PROTOCOL_ERROR</constant></term>
   <listitem>
    <para>memcached プロトコル内で不正なコマンドが実行されたことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-client-error">
   <term><constant>Memcached::RES_CLIENT_ERROR</constant></term>
   <listitem>
    <para>クライアント側でエラーが起きたことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-error">
   <term><constant>Memcached::RES_SERVER_ERROR</constant></term>
   <listitem>
    <para>サーバー側でエラーが起きたことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-write-failure">
   <term><constant>Memcached::RES_WRITE_FAILURE</constant></term>
   <listitem>
    <para>ネットワーク経由でのデータの書き込みに失敗したことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-data-exists">
   <term><constant>Memcached::RES_DATA_EXISTS</constant></term>
   <listitem>
    <para>比較と交換に失敗したことを示します。格納しようとしたアイテムは、
     最後に取得したあとで変更されています。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notstored">
   <term><constant>Memcached::RES_NOTSTORED</constant></term>
   <listitem>
    <para>アイテムが格納されなかったが、その原因はエラーではないということを示します。
     これは通常、"add" や "replace" コマンドの要件を満たさなかったか
     あるいはアイテムが削除キューに入っていることを意味します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notfound">
   <term><constant>Memcached::RES_NOTFOUND</constant></term>
   <listitem>
    <para>このキーのアイテムが ("get" や "cas"
     の操作で) 見つからなかったことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-partial-read">
   <term><constant>Memcached::RES_PARTIAL_READ</constant></term>
   <listitem>
    <para>ネットワーク経由でのデータの読み取りが一部失敗したことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-some-errors">
   <term><constant>Memcached::RES_SOME_ERRORS</constant></term>
   <listitem>
    <para>multi-get を実行中にエラーが発生したことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-no-servers">
   <term><constant>Memcached::RES_NO_SERVERS</constant></term>
   <listitem>
    <para>サーバーリストが空であることを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-end">
   <term><constant>Memcached::RES_END</constant></term>
   <listitem>
    <para>結果セットの末尾を示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-errno">
   <term><constant>Memcached::RES_ERRNO</constant></term>
   <listitem>
    <para>システムエラーを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-buffered">
   <term><constant>Memcached::RES_BUFFERED</constant></term>
   <listitem>
    <para>実行している操作がバッファリングされていることを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-timeout">
   <term><constant>Memcached::RES_TIMEOUT</constant></term>
   <listitem>
    <para>実行がタイムアウトしたことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-bad-key-provided">
   <term><constant>Memcached::RES_BAD_KEY_PROVIDED</constant></term>
   <listitem>
    <para>不正なキーを与えたことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-connection-socket-create-failure">
   <term><constant>Memcached::RES_CONNECTION_SOCKET_CREATE_FAILURE</constant></term>
   <listitem>
    <para>ネットワークソケットの作成が失敗したことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-payload-failure">
   <term><constant>Memcached::RES_PAYLOAD_FAILURE</constant></term>
   <listitem>
    <para>ペイロードに関するエラー: つまり、値を シリアライズ/復元 したり、圧縮/解凍 することができなかったことを示します。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-problem">
   <term><constant>Memcached::RES_AUTH_PROBLEM</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で使用可能です。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-failure">
   <term><constant>Memcached::RES_AUTH_FAILURE</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で使用可能です。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-continue">
   <term><constant>Memcached::RES_AUTH_CONTINUE</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で使用可能です。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-e2big">
   <term><constant>Memcached::RES_E2BIG</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で使用可能です。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-key-too-big">
   <term><constant>Memcached::RES_KEY_TOO_BIG</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で使用可能です。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-temporarily-disabled">
   <term><constant>Memcached::RES_SERVER_TEMPORARILY_DISABLED</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で使用可能です。</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-memory-allocation-failure">
   <term><constant>Memcached::RES_SERVER_MEMORY_ALLOCATION_FAILURE</constant></term>
   <listitem>
    <para>Memcached 3.0.0 以降で使用可能です。</para>
   </listitem>
  </varlistentry>

 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

