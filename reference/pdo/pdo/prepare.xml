<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: c9c158137b0f4658c29faef4043472dc74896d0c Maintainer: takagi Status: ready -->
<!-- CREDITS: shimooka,mumumu -->
<refentry xml:id="pdo.prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::prepare</refname>
  <refpurpose>
   文を実行する準備を行い、文オブジェクトを返す
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::prepare</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>

  <para>
   <function>PDOStatement::execute</function>
   メソッドによって実行される SQL ステートメントを準備します。
   ステートメントのテンプレートは、文が実行されるときに実際の値に置き換えられる 0
   個もしくはそれ以上の名前 (:name) もしくは疑問符 (?)
   パラメータマークを含むことができます。
   名前と疑問符パラメータを同一の
   ステートメントのテンプレート中で使用することはできません。
   どちらか一方か、他のパラメータ形式を使用してください。
   ユーザーの入力をバインドする際にはこれらのパラメータを使います。
   ユーザーの入力を直接クエリに含めてはいけません。
  </para>
  <para>
   <function>PDOStatement::execute</function> をコールする際には、
   文に渡すパラメータにはそれぞれ固有のパラメータマークを設定する必要があります。
   エミュレーションモードが有効になっていない限り、
   ひとつのプリペアドステートメントの中で、同じ名前のパラメータマークを
   複数使用することはできません。
  </para>
  <note>
   <para>
    パラメータマーカーが表せるのは、データリテラルだけです。
    リテラルの一部やキーワード、識別子、その他のクエリのパーツをパラメータにバインドすることはできません。
    たとえば、SQL 文の IN() 句などで、
    ひとつのパラメータに複数の値を割り当てることはできません。
   </para>
  </note>
  <para>
   異なるパラメータを用いて複数回実行されるような文に対し
   <function>PDO::prepare</function> と
   <function>PDOStatement::execute</function> をコールすることで、
   ドライバがクライアントまたはサーバー側にクエリプランやメタ情報を
   キャッシュさせるよう調整するため、
   アプリケーションのパフォーマンスを最適化します。また、
   パラメータに手動でクオートする必要がなくなるので
   SQL インジェクション攻撃から保護する助けになります。
  </para>
  <para>
   PDO は元々この機能をサポートしていないドライバに対して
   プリペアドステートメントとバインドパラメータをエミュレートします。
   このため、ある形式をサポートしているがその他の形式をサポートしていない
   ドライバの場合、名前もしくは疑問符形式のパラメータを他の適当な値に
   書き換えることも可能です。
  </para>
  <note>
   <simpara>
    エミュレートされたプリペアドステートメントと、
    名前パラメータやクエスチョンマークを書き換えるパーサは、[シングル|ダブル]クォート
    に対して標準とは異なるエスケープをサポートしています。
    これによって、バックスラッシュのすぐ後にクォートで終了するクエリは
    そのままの形では認識されず、間違ったパラメータとして認識され、
    実行されたときにプリペアドステートメントが失敗してしまいます。
    回避策は、プリペアドステートメントのエミュレートをこの手のSQLクエリでは使わないようにしつつ、
    ドライバによってサポートされているパラメータの書き換えを避けることです。
   </simpara>
  </note>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       これは対象のデータベースサーバーに対して有効な SQL
       文のテンプレートでなければなりません。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       この配列は、このメソッドによって返される PDOStatement
       オブジェクトに対して 1
       もしくはそれ以上の key=&gt;value の組を含みます。
       通常、スクロール可能なカーソルを要求するために
       <literal>PDO::ATTR_CURSOR</literal> に
       <literal>PDO::CURSOR_SCROLL</literal>
       を設定する場合に使用することになるでしょう。
       いくつかのドライバには、準備する際に利用可能なドライバ固有の
       オプションがあります。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   もしデータベースサーバーが正常に文を準備する場合、
   <function>PDO::prepare</function> は
   <classname>PDOStatement</classname> オブジェクトを返します。
   もしデータベースサーバーが文を準備できなかった場合、
   <function>PDO::prepare</function> は &false; を返すか
   <classname>PDOException</classname> を発行します
   (<link linkend="pdo.error-handling">エラー処理</link> の方法に依存します)。
  </para>
  <note>
   <para>
    プリペアドステートメントをエミュレートする際にデータベースサーバーとの通信は行いません。
    したがって <function>PDO::prepare</function> はステートメントのチェックを行いません。
   </para>
  </note>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>名前付きパラメータを用いて SQL ステートメントのテンプレートを準備する</title>
    <programlisting role="php">
<![CDATA[
<?php
/* 値の配列を渡してプリペアドステートメントを実行する */
$sql = 'SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour';
$sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
$sth->execute(array(':calories' => 150, ':colour' => 'red'));
$red = $sth->fetchAll();
$sth->execute(array(':calories' => 175, ':colour' => 'yellow'));
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>疑問符パラメータを用いて SQL ステートメントのテンプレートを準備する</title>
    <programlisting role="php">
<![CDATA[
<?php
/* 値の配列を渡してプリペアドステートメントを実行する */
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->execute(array(150, 'red'));
$red = $sth->fetchAll();
$sth->execute(array(175, 'yellow'));
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::exec</function></member>
    <member><function>PDO::query</function></member>
    <member><function>PDOStatement::execute</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
