<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1fe877df2ef8c09670a4ff12cf42ef39d35ab9ec Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,shimooka -->

<chapter xml:id="pdo.error-handling" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>エラーおよびエラー処理</title>
 <para>
  PDO が提供するエラー処理方法は 3 通り存在し、
  アプリケーションの開発形態によって使い分けることができます。
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <constant>PDO::ERRMODE_SILENT</constant>
   </para>
   <para>
     PHP 8.0.0 より前のバージョンでは、これがデフォルトのモードでした。
     ステートメントおよびデータベースオブジェクトの
     エラーについて、PDO は単にそのエラーコードのみを設定します。
     これを取得するには <function>PDO::errorCode</function> および
     <function>PDO::errorInfo</function> メソッドを使用します。
     ステートメントオブジェクトへのコールによってエラーが発生した場合は、
     そのオブジェクトの
     <function>PDOStatement::errorCode</function> あるいは
     <function>PDOStatement::errorInfo</function> メソッドを呼び出します。
     データベースオブジェクトへのコールによってエラーが発生した場合は、
     その代わりにデータベースオブジェクト上の同じメソッドを呼び出します。
    </para>
  </listitem>
  <listitem>
   <para>
    <constant>PDO::ERRMODE_WARNING</constant>
   </para>
   <para>
     エラーコードを設定することに加え、PDO は 伝統的な E_WARNING
     メッセージも出力します。この設定はデバッグ/テストの際に有用で、
     アプリケーションの動作を妨げることなしに問題点を確認できるように
     なります。
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>PDO::ERRMODE_EXCEPTION</constant>
    </para>
    <para>
     PHP 8.0.0 以降では、これがデフォルトのモードです。
     エラーコードを設定することに加え、PDO は
     <classname>PDOException</classname> をスローします。エラーコードや
     関連情報が、クラスのプロパティとして設定されます。
     この設定もまたデバッグ時に有用で、エラーが発生した時点で
     スクリプトの実行を停止させることによりコード内の問題点を
     見つけやすくなります
     (例外によりスクリプトが終了した際には、トランザクションは自動的に
     ロールバックされることを覚えておきましょう)。
    </para>
    <para>
     このモードが有用である理由のひとつとして、伝統的な PHP 形式の警告よりも
     より明確にエラー処理コードが書けることがあります。例外を発生させず、
     データベースへのコールのたびに毎回明示的に返り値をチェックすることに
     比べると、コードの量やネストを減らすことができます。
    </para>
    <para>
     PHP の例外についての詳細な情報は、
     <link linkend="language.exceptions">例外</link>
     を参照ください。
    </para>
   </listitem>
 </itemizedlist>
 <para>
  PDO のエラーコードは、SQL-92 の SQLSTATE エラーコード文字列に
  標準化されています。
  ネイティブのコードを適切な SQLSTATE コードに変換するのは、個々の PDO
  ドライバの仕事となります。
  <function>PDO::errorCode</function> メソッドは SQLSTATE コードを返します。
  エラーについての詳細な銃尾法が知りたい場合、PDO では
  <function>PDO::errorInfo</function> メソッドも提供しており、
  これは SQLSTATE コード、ドライバ固有のエラーコードおよびドライバ固有の
  エラーメッセージを含む配列を返します。
 </para>
 
 <para>
  <example>
   <title>PDO インスタンスの作成およびエラーモードの設定</title>
   <programlisting role="php">
<![CDATA[
<?php
$dsn = 'mysql:dbname=testdb;host=127.0.0.1';
$user = 'dbuser';
$password = 'dbpass';

try {
    $dbh = new PDO($dsn, $user, $password);
    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

?>
]]>
   </programlisting>
  </example>
 </para>
 <note>
  <para>
   <function>PDO::__construct</function> は、接続に失敗した場合は常に
   <classname>PDOException</classname> をスローします。
   これは、現在設定されている <constant>PDO::ATTR_ERRMODE</constant>
   が何であっても同じです。例外を処理しないと、fatal エラーとなります。
  </para>
 </note>
 <para>
  <example>
   <title>PDO インスタンスの作成およびコンストラクタでのエラーモードの設定</title>
   <programlisting role="php">
<![CDATA[
<?php
$dsn = 'mysql:dbname=test;host=127.0.0.1';
$user = 'googleguy';
$password = 'googleguy';

/*
    ERRMODE を WARNING にした場合でも、コンストラクタを try/catch で囲むのは有効です。
    接続に失敗した場合、ERRMODE が何であろうが PDO::__construct が PDOException をスローするからです。
*/
try {
    $dbh = new PDO($dsn, $user, $password, array(PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING));
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
    exit;
}

// このテーブルが存在しないとして、このコードを実行すると E_WARNING レベルのエラーになります。例外にはなりません。
$dbh->query("SELECT wrongcolumn FROM wrongtable");
?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Warning: PDO::query(): SQLSTATE[42S02]: Base table or view not found: 1146 Table 'test.wrongtable' doesn't exist in
/tmp/pdo_test.php on line 18
]]>
    </screen>
  </example>
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

