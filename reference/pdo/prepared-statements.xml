<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 84e8f0960b841a5ebca9d81cd2c2311b6504a371 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,shimooka -->

<chapter xml:id="pdo.prepared-statements" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>プリペアドステートメントおよびストアドプロシージャ</title>
 <para>
  より成熟したデータベースの多くは、プリペアドステートメントという
  概念をサポートしています。プリペアドステートメントとはいったい何の
  ことでしょう? これは、実行したい SQL をコンパイルした
  一種のテンプレートのようなものです。パラメータ変数を使用することで
  SQL をカスタマイズすることが可能です。プリペアドステートメントには
  2 つの大きな利点があります。
 </para>
 <itemizedlist>
  <listitem>
   <simpara>
    クエリのパース (あるいは準備) が必要なのは最初の一回だけで、
    同じパラメータ (あるいは別のパラメータ) を指定して何度でも
    クエリを実行することができます。クエリを実行するには、準備として
    クエリの解析やコンパイル、そして実行プランの最適化が行われます。
    クエリが複雑になると、この処理には時間がかかるようになります。
    同じクエリを異なったパラメータで何度も実行すると、アプリケーションの
    動作は目に見えて遅くなるでしょう。
    プリペアドステートメントを使用すると、この
    解析/コンパイル/最適化 の繰り返しを避けることができます。
    端的に言うと、プリペアドステートメントは使用するリソースが少ないため
    高速に動作するということです。
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    プリペアドステートメントに渡すパラメータは、引用符で括る必要は
    ありません。それはドライバが自動的に行います。
    アプリケーションで明示的にプリペアドステートメントを使用するように
    すれば、SQL インジェクションは決して発生しません
    (しかし、もし信頼できない入力をもとにクエリの他の部分を構築している
    のならば、その部分に対するリスクを負うことになります)。
   </simpara>
  </listitem>
 </itemizedlist>
 <para>
  プリペアドステートメントは非常に有用な機能なので、もしドライバが
  サポートしていなくても、例外的に PDO がこの機能をエミュレートします。
  これにより、データベースの機能にかかわらず同じ仕組みで
  データベースへのアクセスができることが保証されます。
 </para>
 <para>
  <example>
   <title>プリペアドステートメントを使用して、繰り返し挿入処理を行う</title>
   <simpara>
    この例は、<literal>name</literal> および <literal>value</literal>
    を名前つきプレースホルダで置き換えて INSERT クエリを実行します。
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("INSERT INTO REGISTRY (name, value) VALUES (:name, :value)");
$stmt->bindParam(':name', $name);
$stmt->bindParam(':value', $value);

// 行を挿入します
$name = 'one';
$value = 1;
$stmt->execute();

// パラメータを変更し、別の行を挿入します
$name = 'two';
$value = 2;
$stmt->execute();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>プリペアドステートメントを使用して、繰り返し挿入処理を行う</title>
   <simpara>
    この例は、<literal>name</literal> および <literal>value</literal>
    をプレースホルダ <literal>?</literal> で置き換えて INSERT クエリを実行します。
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("INSERT INTO REGISTRY (name, value) VALUES (?, ?)");
$stmt->bindParam(1, $name);
$stmt->bindParam(2, $value);

// 行を挿入します
$name = 'one';
$value = 1;
$stmt->execute();

// パラメータを変更し、別の行を挿入します
$name = 'two';
$value = 2;
$stmt->execute();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>プリペアドステートメントを使用してデータを取得する</title>
   <simpara>
    この例では、フォームで入力したキーの値に応じたデータを取得します。
    ユーザーの入力内容は自動的に引用符で括られるので、SQL インジェクション攻撃の
    恐れはありません。
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name = ?");
$stmt->execute([$_GET['name']]);
foreach ($stmt as $row) {
  print_r($row);
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>出力パラメータを指定してストアドプロシージャをコールする</title>
   <simpara>
    データベースドライバがサポートしていれば、入力パラメータだけでなく
    出力パラメータもバインドすることが可能です。出力パラメータは、
    一般にストアドプロシージャから値を受け取るために使用します。この場合、
    返される値の大きさがどの程度になるのかをバインド時に知っておく必要が
    あります。指定した大きさよりも大きな値が返されると、エラーが発生します。
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("CALL sp_returns_string(?)");
$stmt->bindParam(1, $return_value, PDO::PARAM_STR, 4000); 

// ストアドプロシージャをコールします
$stmt->execute();

print "プロシージャが返した値は $return_value です\n";
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>入出力パラメータを指定してストアドプロシージャをコールする</title>
   <simpara>
    入出力の両方に使用するパラメータを指定することもできます。
    このパラメータの書式は、出力パラメータと同じです。
    次の例では、ストアドプロシージャに文字列 'hello' を渡しています。
    プロシージャの結果が返ってくると、
    この文字列はプロシージャの返す値に置き換えられます。
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("CALL sp_takes_string_returns_string(?)");
$value = 'hello';
$stmt->bindParam(1, $value, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 4000); 

// ストアドプロシージャをコールします
$stmt->execute();

print "プロシージャが返した値は $value です\n";
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>プレースホルダの間違った使用法</title>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE '%?%'");
$stmt->execute([$_GET['name']]);

// プレースホルダは、値全体に対して使用しなければなりません
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE ?");
$stmt->execute(["%$_GET[name]%"]);
?>
]]>
   </programlisting>
  </example>
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

